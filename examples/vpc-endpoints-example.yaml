components:
  terraform:
    vpc-with-endpoints:
      metadata:
        component: vpc
        type: abstract
      vars:
        # Enable both gateway and interface endpoints
        gateway_vpc_endpoints:
          - s3
          - dynamodb

        interface_vpc_endpoints:
          - ec2
          - ecr.dkr
          - ecr.api
          - ecs
          - ecs-agent
          - ecs-telemetry
          - logs
          - ssm
          - ssmmessages
          - ec2messages
          - sts
          - secretsmanager

        # VPC configuration
        ipv4_primary_cidr_block: "10.0.0.0/16"
        availability_zones:
          - "a"
          - "b"
          - "c"

        # Enable VPC Flow Logs
        vpc_flow_logs_enabled: true
        vpc_flow_logs_traffic_type: "ALL"
        vpc_flow_logs_log_destination_type: "s3"

        # Public subnets enabled for NAT gateways
        public_subnets_enabled: true
        nat_gateway_enabled: true
        max_nats: 2  # Cost optimization - only 2 NAT gateways instead of 3

        # Subnet type tagging
        subnet_type_tag_key: "cpco/subnet/type"

    # Example of how to use the exposed outputs in an ECS service
    ecs-service-with-vpc-endpoints:
      metadata:
        component: ecs-service
        type: abstract
      vars:
        # Reference the VPC component
        vpc_component_name: "vpc-with-endpoints"

        # Example custom security group rules using the new outputs
        custom_security_group_rules:
          # Allow access to S3 using the prefix list from the gateway endpoint
          - type: "egress"
            from_port: 443
            to_port: 443
            protocol: "tcp"
            description: "Allow HTTPS to S3 via VPC endpoint"
            # This would use: module.vpc.outputs.vpc_endpoint_s3_prefix_list_id
            prefix_list_ids: []  # Will be populated from remote state

          # Allow access to DynamoDB using the prefix list from the gateway endpoint
          - type: "egress"
            from_port: 443
            to_port: 443
            protocol: "tcp"
            description: "Allow HTTPS to DynamoDB via VPC endpoint"
            # This would use: module.vpc.outputs.vpc_endpoint_dynamodb_prefix_list_id
            prefix_list_ids: []  # Will be populated from remote state

          # Allow communication with interface endpoints
          - type: "egress"
            from_port: 443
            to_port: 443
            protocol: "tcp"
            description: "Allow HTTPS to interface VPC endpoints"
            source_security_group_id: null  # Will be populated from remote state
            # This would use: module.vpc.outputs.vpc_endpoint_interface_security_group_id

        # Container configuration
        container_definition:
          image: "nginx:latest"
          memory: 512
          cpu: 256
          essential: true
          portMappings:
            - containerPort: 80
              protocol: "tcp"

        # Task definition configuration
        task_cpu: 256
        task_memory: 512
        network_mode: "awsvpc"
        requires_compatibilities:
          - "FARGATE"

        # Service configuration
        desired_count: 2
        deployment_configuration:
          maximum_percent: 200
          minimum_healthy_percent: 50

        # Load balancer configuration
        use_lb: true
        alb_configuration: "public"
